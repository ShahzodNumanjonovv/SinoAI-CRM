generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  phone     String   @unique
  email     String?  @unique
  role      String   @default("RECEPTION")
  password  String
  createdAt DateTime @default(now())

  @@map("ec_users")
}

model Department {
  id       String    @id @default(cuid())
  name     String    @unique
  active   Boolean   @default(true)
  doctors  Doctor[]
  services Service[]

  @@map("ec_departments")
}

model AppointmentHold {
  id        String   @id @default(cuid())
  doctorId  String
  date      DateTime
  from      String // "10:00"
  to        String // "10:30"
  createdAt DateTime @default(now())
  expiresAt DateTime

  // â†” Doctor bilan relation (nom: "DoctorHolds")
  doctor Doctor @relation("DoctorHolds", fields: [doctorId], references: [id])

  @@unique([doctorId, date, from]) // bir slotga bitta hold
  @@index([expiresAt])
  @@map("ec_appointment_holds")
}

model Patient {
  id           String        @id @default(cuid())
  firstName    String
  lastName     String
  phone        String        @unique
  birthDate    DateTime?
  gender       String
  address      String?
  createdAt    DateTime      @default(now())
  appointments Appointment[]
  invoices     Invoice[]

  @@map("ec_patients")
}

model Doctor {
  id              String   @id @default(cuid())
  code            String?  @unique
  firstName       String
  lastName        String
  speciality      String
  roomNo          Int?
  priceUZS        Int
  departmentId    String?
  avatarUrl       String?
  experienceYears Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // relations
  appointments Appointment[]
  department   Department?       @relation(fields: [departmentId], references: [id])
  holds        AppointmentHold[] @relation("DoctorHolds") // <-- YANGI: AppointmentHold qarshi tomoni

  @@map("ec_doctors")
}

model Service {
  id           String        @id @default(cuid())
  code         String?       @unique
  name         String
  priceUZS     Int
  departmentId String?
  active       Boolean       @default(true)
  createdAt    DateTime      @default(now())
  items        InvoiceItem[]
  department   Department?   @relation(fields: [departmentId], references: [id])

  @@map("ec_services")
}

model Discount {
  id        String    @id @default(cuid())
  name      String
  dtype     String
  value     Int
  active    Boolean   @default(true)
  createdAt DateTime  @default(now())
  invoices  Invoice[]

  @@map("ec_discounts")
}

model Invoice {
  id          String        @id @default(cuid())
  code        Int           @unique
  patientId   String
  status      String        @default("UNPAID")
  subtotal    Int           @default(0)
  discountId  String?
  discountAmt Int           @default(0)
  total       Int           @default(0)
  createdAt   DateTime      @default(now())
  items       InvoiceItem[]
  discount    Discount?     @relation(fields: [discountId], references: [id])
  patient     Patient       @relation(fields: [patientId], references: [id])

  @@map("ec_invoices")
}

model InvoiceItem {
  id        String  @id @default(cuid())
  invoiceId String
  serviceId String
  qty       Int     @default(1)
  priceUZS  Int
  invoice   Invoice @relation(fields: [invoiceId], references: [id])
  service   Service @relation(fields: [serviceId], references: [id])

  @@map("ec_invoice_items")
}

model Appointment {
  id        String            @id @default(cuid())
  date      DateTime
  from      String
  to        String
  note      String?
  source    String            @default("miniapp")
  status    AppointmentStatus @default(PENDING)
  doctorId  String
  patientId String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  doctor  Doctor  @relation(fields: [doctorId], references: [id])
  patient Patient @relation(fields: [patientId], references: [id])

  @@unique([doctorId, date, from])
  @@index([date, doctorId])
  @@map("ec_appointments")
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  DONE
}
