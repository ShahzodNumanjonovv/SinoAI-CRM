// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/types.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../app/(dashboard)/calendar/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/calendar">> = Specific
  const handler = {} as typeof import("../../app/(dashboard)/calendar/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(dashboard)/doctors/[id]/edit/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/doctors/[id]/edit">> = Specific
  const handler = {} as typeof import("../../app/(dashboard)/doctors/[id]/edit/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(dashboard)/doctors/new/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/doctors/new">> = Specific
  const handler = {} as typeof import("../../app/(dashboard)/doctors/new/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(dashboard)/doctors/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/doctors">> = Specific
  const handler = {} as typeof import("../../app/(dashboard)/doctors/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(dashboard)/kassir/[id]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/kassir/[id]">> = Specific
  const handler = {} as typeof import("../../app/(dashboard)/kassir/[id]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(dashboard)/kassir/create/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/kassir/create">> = Specific
  const handler = {} as typeof import("../../app/(dashboard)/kassir/create/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(dashboard)/kassir/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/kassir">> = Specific
  const handler = {} as typeof import("../../app/(dashboard)/kassir/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(dashboard)/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/(dashboard)/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(dashboard)/patients/new/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/patients/new">> = Specific
  const handler = {} as typeof import("../../app/(dashboard)/patients/new/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(dashboard)/patients/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/patients">> = Specific
  const handler = {} as typeof import("../../app/(dashboard)/patients/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(dashboard)/profile/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/profile">> = Specific
  const handler = {} as typeof import("../../app/(dashboard)/profile/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(dashboard)/services/new/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/services/new">> = Specific
  const handler = {} as typeof import("../../app/(dashboard)/services/new/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(dashboard)/services/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/services">> = Specific
  const handler = {} as typeof import("../../app/(dashboard)/services/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(dashboard)/settings/clinic/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/settings/clinic">> = Specific
  const handler = {} as typeof import("../../app/(dashboard)/settings/clinic/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(dashboard)/settings/departments/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/settings/departments">> = Specific
  const handler = {} as typeof import("../../app/(dashboard)/settings/departments/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(dashboard)/settings/discounts/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/settings/discounts">> = Specific
  const handler = {} as typeof import("../../app/(dashboard)/settings/discounts/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(dashboard)/statistics/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/statistics">> = Specific
  const handler = {} as typeof import("../../app/(dashboard)/statistics/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(dashboard)/users/[id]/edit/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/users/[id]/edit">> = Specific
  const handler = {} as typeof import("../../app/(dashboard)/users/[id]/edit/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(dashboard)/users/new/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/users/new">> = Specific
  const handler = {} as typeof import("../../app/(dashboard)/users/new/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(dashboard)/users/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/users">> = Specific
  const handler = {} as typeof import("../../app/(dashboard)/users/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/doctors/[id]/edit/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/api/doctors/[id]/edit">> = Specific
  const handler = {} as typeof import("../../app/api/doctors/[id]/edit/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/login/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/login">> = Specific
  const handler = {} as typeof import("../../app/login/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(dashboard)/kassir/[id]/cancel/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/kassir/[id]/cancel">> = Specific
  const handler = {} as typeof import("../../app/(dashboard)/kassir/[id]/cancel/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(dashboard)/kassir/[id]/pay/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/kassir/[id]/pay">> = Specific
  const handler = {} as typeof import("../../app/(dashboard)/kassir/[id]/pay/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/appointments/[id]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/appointments/[id]">> = Specific
  const handler = {} as typeof import("../../app/api/appointments/[id]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/appointments/day/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/appointments/day">> = Specific
  const handler = {} as typeof import("../../app/api/appointments/day/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/appointments/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/appointments">> = Specific
  const handler = {} as typeof import("../../app/api/appointments/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/auth/change-password/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/auth/change-password">> = Specific
  const handler = {} as typeof import("../../app/api/auth/change-password/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/auth/login/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/auth/login">> = Specific
  const handler = {} as typeof import("../../app/api/auth/login/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/auth/logout/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/auth/logout">> = Specific
  const handler = {} as typeof import("../../app/api/auth/logout/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/calendar/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/calendar">> = Specific
  const handler = {} as typeof import("../../app/api/calendar/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/departments/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/departments">> = Specific
  const handler = {} as typeof import("../../app/api/departments/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/discounts/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/discounts">> = Specific
  const handler = {} as typeof import("../../app/api/discounts/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/doctors/[id]/availability/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/doctors/[id]/availability">> = Specific
  const handler = {} as typeof import("../../app/api/doctors/[id]/availability/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/doctors/[id]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/doctors/[id]">> = Specific
  const handler = {} as typeof import("../../app/api/doctors/[id]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/doctors/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/doctors">> = Specific
  const handler = {} as typeof import("../../app/api/doctors/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/invoices/[id]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/invoices/[id]">> = Specific
  const handler = {} as typeof import("../../app/api/invoices/[id]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/invoices/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/invoices">> = Specific
  const handler = {} as typeof import("../../app/api/invoices/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/miniapp/book/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/miniapp/book">> = Specific
  const handler = {} as typeof import("../../app/api/miniapp/book/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/miniapp/doctors/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/miniapp/doctors">> = Specific
  const handler = {} as typeof import("../../app/api/miniapp/doctors/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/miniapp/hold/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/miniapp/hold">> = Specific
  const handler = {} as typeof import("../../app/api/miniapp/hold/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/patients/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/patients">> = Specific
  const handler = {} as typeof import("../../app/api/patients/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/services/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/services">> = Specific
  const handler = {} as typeof import("../../app/api/services/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/statistics/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/statistics">> = Specific
  const handler = {} as typeof import("../../app/api/statistics/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/stats/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/stats">> = Specific
  const handler = {} as typeof import("../../app/api/stats/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/users/[id]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/users/[id]">> = Specific
  const handler = {} as typeof import("../../app/api/users/[id]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/users/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/users">> = Specific
  const handler = {} as typeof import("../../app/api/users/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}





// Validate ../../app/(dashboard)/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/(dashboard)/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}
